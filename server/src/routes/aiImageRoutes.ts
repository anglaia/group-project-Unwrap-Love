import express from 'express';
import multer from 'multer';
import axios from 'axios';
import fs from 'fs';
import path from 'path';
import sharp from 'sharp';
import AiImageModel from '../models/AiImageModel'
import { v4 as uuidv4 } from 'uuid';
import OpenAI from 'openai';
import dotenv from 'dotenv';

dotenv.config();

const router = express.Router();
// ÂàõÂª∫Êñá‰ª∂Â§πÂ¶ÇÊûú‰∏çÂ≠òÂú®
const ensureDirExists = (dirPath: string) => {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
  }
};

ensureDirExists('public/upload/aiImage');

// ÂàùÂßãÂåñ X.AI API ÂÆ¢Êà∑Á´Ø
const openai = new OpenAI({
  apiKey: process.env.XAI_API_KEY || 'dummy-key',
  baseURL: "https://api.x.ai/v1",
});

// ‰øÆÊîπ‰∏∫Âü∫‰∫éÁ∫ØÊñáÊú¨ÁöÑAIÂõæÂÉèÁîüÊàê
router.post('/aiImage', express.json(), async (req, res) => {
  console.log('AI text-to-image generation called');

  try {
    const id = uuidv4();
    const outputPath = `public/upload/aiImage/${id}.webp`;

    // ‰ªéËØ∑Ê±Ç‰Ωì‰∏≠Ëé∑ÂèñÊèêÁ§∫ËØç
    const prompt = req.body.prompt?.trim();
    if (!prompt) {
      return res.status(400).json({ success: false, message: 'Prompt is required' });
    }

    console.log(`ÁîüÊàêÂõæÂÉèÁöÑÊèêÁ§∫ËØç: "${prompt}"`);

    // ‰ΩøÁî® X.AI ÁîüÊàêÂõæÂÉè
    const response = await openai.images.generate({
      model: "grok-2-image",
      prompt: prompt,
    });

    // Ëé∑ÂèñÁîüÊàêÁöÑÂõæÂÉèURL
    const imageUrl = response.data?.[0]?.url;

    // Ê£ÄÊü•URLÊòØÂê¶Â≠òÂú®
    if (!imageUrl) {
      return res.status(500).json({ success: false, message: 'Failed to generate image: No URL returned' });
    }

    // ‰∏ãËΩΩÂõæÂÉè
    const imageResponse = await axios.get(imageUrl, { responseType: 'arraybuffer' });
    const imageBuffer = Buffer.from(imageResponse.data as ArrayBuffer);

    // ‰øùÂ≠òÂõæÂÉèÂà∞Êú¨Âú∞
    await sharp(imageBuffer).toFormat('webp').toFile(outputPath);

    // ÂìçÂ∫îÊàêÂäüÂíåÂõæÂÉèË∑ØÂæÑ
    res.json({
      success: true,
      id,
      imageUrl: `/upload/aiImage/${path.basename(outputPath)}`
    });
  } catch (err) {
    console.error('‚ùå AI generator error:', err);
    res.status(500).json({ success: false, message: 'Failed to generate AI image' });
  }
});

// Êñ∞Â¢ûÔºöÂèñÂæó AI ÂúñÁâáÔºàGETÔºâ
router.get('/aiImage/:filename', async (req, res) => {
  const filename = req.params.filename;

  const imagePath = path.join(__dirname, '../../public/upload/aiImage', filename);

  // Ê™¢Êü•Ê™îÊ°àÊòØÂê¶Â≠òÂú®
  if (!fs.existsSync(imagePath)) {
    return res.status(404).json({ success: false, message: 'ÂúñÁâá‰∏çÂ≠òÂú®' });
  }

  // ÂõûÂÇ≥ÂúñÁâáÊ™îÊ°à
  res.sendFile(imagePath);
});

//for cancel the apply image
router.delete('/aiImage/:filename', async (req, res) => {
  const filename = req.params.filename;

  const imagePath = path.join(__dirname, '../../public/upload/aiImage', filename);

  try {
    // Ê™¢Êü•ÂúñÁâáÊòØÂê¶Â≠òÂú®
    if (!fs.existsSync(imagePath)) {
      return res.status(404).json({ success: false, message: 'ÂúñÁâá‰∏çÂ≠òÂú®' });
    }

    // Âà™Èô§ÂúñÁâá
    fs.unlinkSync(imagePath);

    res.json({ success: true, message: 'ÂúñÁâáÂ∑≤ÊàêÂäüÂà™Èô§' });
  } catch (err) {
    console.error('‚ùå Âà™Èô§ÂúñÁâáÊôÇÂá∫ÈåØÔºö', err);
    res.status(500).json({ success: false, message: 'Âà™Èô§Â§±Êïó' });
  }
});

//handle apply ai image
router.post('/aiImage/save', async (req, res) => {
  console.log("üì• Êî∂Âà∞ÂÑ≤Â≠òË´ãÊ±Ç", req.body)
  const { id, imageUrl, position, zIndex, rotation, dateTaken } = req.body;

  try {
    const result = await AiImageModel.create({
      id,
      imageUrl,
      position,
      zIndex,
      rotation,
      dateTaken,
      createdAt: new Date(),
    });

    console.log("‚úÖ MongoDB successful:", result);

    res.json({ success: true, data: result });
  } catch (error) {
    console.error(' fail to save the ai image:', error);
    res.status(500).json({ success: false, message: 'fail to save the ai image:' });
  }
});

//update the position after dragging
router.patch('/aiImage/update-position', async (req, res) => {
  const { id, position, zIndex } = req.body;
  try {
    await AiImageModel.findOneAndUpdate({ id }, { position, zIndex });
    res.json({ success: true });
  } catch (error) {
    console.error('fail to update position :', error);
    res.status(500).json({ success: false });
  }
});

// load all the Ai images
router.get('/aiImages', async (req, res) => {
  try {
    const images = await AiImageModel.find({});
    res.json({ success: true, data: images });
  } catch (error) {
    console.error('‚ùå ÁÑ°Ê≥ïËºâÂÖ•ÂúñÁâáÔºö', error);
    res.status(500).json({ success: false, message: 'ËºâÂÖ•Â§±Êïó' });
  }
});

//for delete the ai image from mongoDB
router.delete('/aiImage/by-id/:id', async (req, res) => {
  const { id } = req.params;

  try {
    // try to find the image
    const imageDoc = await AiImageModel.findOne({ id });

    if (!imageDoc) {
      return res.status(404).json({ success: false, message: 'fail to find the image' });
    }

    const filename = path.basename(imageDoc.imageUrl); // extra the filename from imageUrl 
    const imagePath = path.join(__dirname, '../../public/upload/aiImage', filename);

    // deleted the image from file
    if (fs.existsSync(imagePath)) {
      fs.unlinkSync(imagePath);
    }

    // remove the data from mongoDB
    await AiImageModel.deleteOne({ id });

    res.json({ success: true, message: 'deleted from MomgoDB sucessfully' });
  } catch (err) {
    console.error('‚ùå fail to delete from mongoDBÔºö', err);
    res.status(500).json({ success: false, message: 'error during deleting from MongoDB' });
  }
});

export default router;
